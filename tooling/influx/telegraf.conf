[global_tags]


[agent]
  interval = "0.001s"
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "5s"
  flush_interval = "5s"
  flush_jitter = "0s"
  #precision = ""
  omit_hostname = true


[[outputs.influxdb_v2]]
  urls = [ "${DOCKER_INFLUX_URL}" ]
  organization = "${DOCKER_INFLUX_ORG}"
  bucket = "${DOCKER_INFLUX_BUCKET}"
  token = "${DOCKER_INFLUX_TOKEN}"
  insecure_skip_verify = true


[[inputs.mqtt_consumer]]
  servers = ["tcp://broker:1883"]
  qos = 1
  
  topics = [ 
    "#"
  ]
  
  # The the _measurement value
  name_override = "Mqtt"
  
  # The name of the topic tag
  topic_tag = "FullTopic"

  data_format = "json_v2"
  [[inputs.mqtt_consumer.json_v2]]
    #timestamp_path = "Observation.Timestamp"
    #timestamp_format = "2006-01-02T15:04:05Z07:00" # ISO 8601 Format.
  	[[inputs.mqtt_consumer.json_v2.field]]
  		path = "Observation.Value"
  		optional = false


# Omit Any Video Topics ending with `/Video` or `/Video/<number>` to reduce load on influxdb
[[processors.starlark]]
  source = '''
def apply(metric):
  full_topic = metric.tags.get("FullTopic", "")
  if full_topic.endswith("/Video"):
    return None
  if "/Video/" in full_topic:
    parts = full_topic.split("/Video/")
    if len(parts) == 2 and parts[1].isdigit():
      return None  # Drop the metric if the second part is numeric
  return metric
'''


# Extract Tags
[[processors.regex]]
  # Select data which has a measurement value of "Mqtt"
  namepass = ["Mqtt"]
  
  # Extract ISA-95 Topic Structure from FullTopic
  #   Enterprise/Site/Area/Line/Cell/Topic
  [[processors.regex.tags]]
    key = "FullTopic"
    pattern = "^(.*?)/.*"
    replacement = "${1}"
    result_key = "Enterprise"
  [[processors.regex.tags]]
    key = "FullTopic"
    pattern = "^[^/]*/(.*?)/.*"
    replacement = "${1}"
    result_key = "Site"
  [[processors.regex.tags]]
    key = "FullTopic"
    pattern = "^[^/]*/[^/]*/(.*?)/.*"
    replacement = "${1}"
    result_key = "Area"
  [[processors.regex.tags]]
    key = "FullTopic"
    pattern = "^[^/]*/[^/]*/[^/]*/(.*?)/.*"
    replacement = "${1}"
    result_key = "Line"
  [[processors.regex.tags]]
    key = "FullTopic"
    pattern = "^[^/]*/[^/]*/[^/]*/[^/]*/(.*?)/.*"
    replacement = "${1}"
    result_key = "Cell"

  # The topic suffix after Enterprise/Site/Area/Line/Cell/[Topic]
  [[processors.regex.tags]]
    key = "FullTopic"
    pattern = "^[^/]*/[^/]*/[^/]*/[^/]*/[^/]*/(.*?)"
    replacement = "${1}"
    result_key = "Topic"

  # The last element in the topic Enterprise/Site/Area/Line/Cell/w/x/y/z = "z"
  [[processors.regex.tags]]
    key = "FullTopic"
    pattern = "^[^/]*/[^/]*/[^/]*/[^/]*/.*/(.*?)$"
    replacement = "${1}"
    result_key = "Name"

  # Replace the measurement value with the value of FullTopic
  [[processors.converter]]
   [processors.converter.tags]
     measurement = ["FullTopic"]

